wdiSeries$Long.definition[which(wdiSeries$Series.Code == "AG.AGR.TRAC.NO"),]
wdiSeries$Long.definition[which(wdiSeries$Series.Code == "AG.AGR.TRAC.NO")]
wdiSeries$Short.definition[which(wdiSeries$Series.Code == "AG.AGR.TRAC.NO")]
wdiInfo <- function(x) {
print(paste("Info for:", x)
print("/n")
print(paste("Name:", wdiSeries$Indicator.name[which(wdiSeries$Series.Code == x)]))
print("/n")
print("Short Description:")
print(wdiSeries$Short.definition[which(wdiSeries$Series.Code == x)])
print("Lhort Description:")
print(wdiSeries$Long.definition[which(wdiSeries$Series.Code == x)])
}
wdiInfo <- function(x) {
print(paste("Info for:", x))
print("/n")
print(paste("Name:", wdiSeries$Indicator.name[which(wdiSeries$Series.Code == x)]))
print("/n")
print("Short Description:")
print(wdiSeries$Short.definition[which(wdiSeries$Series.Code == x)])
print("Long Description:")
print(wdiSeries$Long.definition[which(wdiSeries$Series.Code == x)])
}
wdiInfo("AG.AGR.TRAC.NO")
wdiInfo <- function(x) {
print(paste("Info for:", x))
print(paste("Name:", wdiSeries$Indicator.name[which(wdiSeries$Series.Code == x)]))
print("Short Description:")
print(wdiSeries$Short.definition[which(wdiSeries$Series.Code == x)])
print("Long Description:")
print(wdiSeries$Long.definition[which(wdiSeries$Series.Code == x)])
}
wdiInfo("AG.AGR.TRAC.NO")
wdiInfo <- function(x) {
print(paste("Info for:", x))
print(paste("Name:", wdiSeries$Indicator.Name[which(wdiSeries$Series.Code == x)]))
print("Short Description:")
print(wdiSeries$Short.definition[which(wdiSeries$Series.Code == x)])
print("Long Description:")
print(wdiSeries$Long.definition[which(wdiSeries$Series.Code == x)])
wdiSeries[which(wdiSeries$Series.Code == x)]
}
wdiInfo("AG.AGR.TRAC.NO")
wdiInfo <- function(x) {
print(paste("Info for:", x))
print(paste("Name:", wdiSeries$Indicator.Name[which(wdiSeries$Series.Code == x)]))
print("Short Description:")
print(wdiSeries$Short.definition[which(wdiSeries$Series.Code == x)])
print("Long Description:")
print(wdiSeries$Long.definition[which(wdiSeries$Series.Code == x)])
wdiSeries[which(wdiSeries$Series.Code == x),]
}
wdiInfo("AG.AGR.TRAC.NO")
#Script for downloading and cleaning the World Development Indicators
library(bitops)
library(RCurl)
library(reshape2)
library(Hmisc)
wdiData <- NULL
temp <- tempfile()
download.file("http://databank.worldbank.org/data/download/WDI_csv.zip",temp)
unzip(temp, list = TRUE)
wdiData <- read.csv(unzip(temp, files="WDI_Data.csv"))
wdiCSNotes <- read.csv(unzip(temp, files="WDI_CS_Notes.csv"))
wdiStNotes <- read.csv(unzip(temp, files="WDI_ST_Notes.csv"))
wdiFootnotes <- read.csv(unzip(temp, files="WDI_Footnotes.csv"))
wdiDescription <- read.csv(unzip(temp, files="WDI_Description.csv"))
wdiCountry <- read.csv(unzip(temp, files="WDI_Country.csv"))
wdiSeries <- read.csv(unzip(temp, files="WDI_Series.csv"))
#unlink(temp)
wdiBackup <- wdiData
trimX <- function(x) {
substr(x,2,5)
}
wdiData$Country.Name <- sapply(wdiData$Country.Name, as.character)
longData <- melt(wdiData, id=c("Country.Name","Country.Code","Indicator.Name","Indicator.Code"), variable_name = "year")
wideData <- dcast(longData, Country.Name + year ~ Indicator.Code, value.var = "value")
wideData$year <- sapply(wideData$year, as.character)
wideData$year <- sapply(wideData$year, trimX)
wideData$year <- sapply(wideData$year, as.numeric)
class(wideData$year)
# varCodes<- unique(wdiData$Indicator.Code)
# varLabel<- unique(as.character(wdiData$Indicator.Name))
# class(varLabel)
# varLabel <- c("country", "year", varLabel)
# varLabel
# str(varLabel)
# label(wideData) <- varLabel
# labelPairs <- pairlist(wdiData$Indicator.Code = wdiData$Indicator.Name)
# str(labelPairs)
wdiInfo <- function(x) {
print(paste("Info for:", x))
print(paste("Name:", wdiSeries$Indicator.Name[which(wdiSeries$Series.Code == x)]))
print("Short Description:")
print(wdiSeries$Short.definition[which(wdiSeries$Series.Code == x)])
print("Long Description:")
print(wdiSeries$Long.definition[which(wdiSeries$Series.Code == x)])
wdiSeries[which(wdiSeries$Series.Code == x),]
}
#col 83, afghanistan = 3.7, albania = 6.2
unlink(temp)
#Script for downloading and cleaning the World Development Indicators
library(bitops)
library(RCurl)
library(reshape2)
library(Hmisc)
wdiData <- NULL
temp <- tempfile()
download.file("http://databank.worldbank.org/data/download/WDI_csv.zip",temp)
unzip(temp, list = TRUE)
wdiData <- read.csv(unzip(temp, files="WDI_Data.csv"))
wdiCSNotes <- read.csv(unzip(temp, files="WDI_CS_Notes.csv"))
wdiStNotes <- read.csv(unzip(temp, files="WDI_ST_Notes.csv"))
wdiFootnotes <- read.csv(unzip(temp, files="WDI_Footnotes.csv"))
wdiDescription <- read.csv(unzip(temp, files="WDI_Description.csv"))
wdiCountry <- read.csv(unzip(temp, files="WDI_Country.csv"))
wdiSeries <- read.csv(unzip(temp, files="WDI_Series.csv"))
#unlink(temp)
wdiBackup <- wdiData
trimX <- function(x) {
substr(x,2,5)
}
wdiData$Country.Name <- sapply(wdiData$Country.Name, as.character)
longData <- melt(wdiData, id=c("Country.Name","Country.Code","Indicator.Name","Indicator.Code"), variable_name = "year")
wideData <- dcast(longData, Country.Name + year ~ Indicator.Code, value.var = "value")
wideData$year <- sapply(wideData$year, as.character)
wideData$year <- sapply(wideData$year, trimX)
wideData$year <- sapply(wideData$year, as.numeric)
class(wideData$year)
# varCodes<- unique(wdiData$Indicator.Code)
# varLabel<- unique(as.character(wdiData$Indicator.Name))
# class(varLabel)
# varLabel <- c("country", "year", varLabel)
# varLabel
# str(varLabel)
# label(wideData) <- varLabel
# labelPairs <- pairlist(wdiData$Indicator.Code = wdiData$Indicator.Name)
# str(labelPairs)
wdiInfo <- function(x) {
print(paste("Info for:", x))
print(paste("Name:", wdiSeries$Indicator.Name[which(wdiSeries$Series.Code == x)]))
print("Short Description:")
print(wdiSeries$Short.definition[which(wdiSeries$Series.Code == x)])
print("Long Description:")
print(wdiSeries$Long.definition[which(wdiSeries$Series.Code == x)])
wdiSeries[which(wdiSeries$Series.Code == x),]
}
#col 83, afghanistan = 3.7, albania = 6.2
sum(year)
sum(wideData$year)
longData <- melt(wdiData, id=c("Country.Name","Country.Code","Indicator.Name","Indicator.Code"), variable_name = "year")
wideData <- dcast(longData, Country.Name + year ~ Indicator.Code, value.var = "value")
head(longData)
wideData <- dcast(longData, Country.Name + variable ~ Indicator.Code, value.var = "value")
wideData <- rename(wideData, c("variable"="year"))
library(plyr)
wideData <- rename(wideData, c("variable"="year"))
wideData$year <- sapply(wideData$year, as.character)
wideData$year <- sapply(wideData$year, trimX)
wideData$year <- sapply(wideData$year, as.numeric)
class(wideData$year)
sum(wideData$year)
summary(wideData$year)
summary(wideData$year[which(!is.nan(wideData$NY.GDP.PCAP.KD))])
summary(wideData$year[which(!is.nan(wideData$NY.GDP.PCAP.KD))])
unlink(temp)
longData <- NULL
wdiBackup <- NULL
wdiData <- NULL
#Get corruption barometor data
library(XML)
library(plyr)
library(XLConnect)
library(bitops)
library(RCurl)
i <- 2004
f(i==1998) {theurl <- "http://archive.transparency.org/policy_research/surveys_indices/gcb/2004/press_release_gcb_2004"}
if (i < 2010) {
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
cbDATA <- tables[[which.max(n.rows)]]
}
head(cbDATA)
#Get corruption barometor data
library(XML)
library(plyr)
library(XLConnect)
library(bitops)
library(RCurl)
i <- 2004
f(i==2004) {theurl <- "http://archive.transparency.org/policy_research/surveys_indices/gcb/2004/press_release_gcb_2004"}
if (i < 2010) {
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
cbDATA <- tables[[which.max(n.rows)]]
}
head(cbDATA)
#Get corruption barometor data
library(XML)
library(plyr)
library(XLConnect)
library(bitops)
library(RCurl)
i <- 2004
if(i==2004) {theurl <- "http://archive.transparency.org/policy_research/surveys_indices/gcb/2004/press_release_gcb_2004"}
if (i < 2010) {
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
cbDATA <- tables[[which.max(n.rows)]]
}
head(cbDATA)
#Get corruption barometor data
# To what extent do you perceive the following sectors in this country to be affected by corruption?
# (1: not at all corrupt, 5: extremely corrupt)
library(XML)
library(plyr)
library(XLConnect)
library(bitops)
library(RCurl)
i <- 2004
#retrive raw data
#   if(i==2004) {theurl <- "http://archive.transparency.org/policy_research/surveys_indices/gcb/2004/press_release_gcb_2004"}
#
#   if (i < 2010) {
#     tables <- readHTMLTable(theurl)
#     n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
#     cbDATA <- tables[[which.max(n.rows)]]
#   }
head(cbDATA)
#rename variables
if (i ==2004) {
cbDATA <- rename(cbDATA, c("V1" = "Country.Code", "V2" = "PoliticalParties", "V3" = "Parliament.Legislature",
"V4" = "LegalSystem.Judiciary". "V5" = "Police", "V6" = "Business.PrivateSector",
"v7" = "TaxRevenue", "V8" = "Customs", "V9" = "Media", "V10" = "MedicalServices",
"V11" = "EducationSystem", "V12" = "RegistryAndPermitServices", "V13" = "Utilities",
"V14" = "Military", "V15" = "NGOs", "V16" = "RelibiousBodies"))
}
head(cbDATA)
#Get corruption barometor data
# To what extent do you perceive the following sectors in this country to be affected by corruption?
# (1: not at all corrupt, 5: extremely corrupt)
library(XML)
library(plyr)
library(XLConnect)
library(bitops)
library(RCurl)
i <- 2004
#retrive raw data
#   if(i==2004) {theurl <- "http://archive.transparency.org/policy_research/surveys_indices/gcb/2004/press_release_gcb_2004"}
#
#   if (i < 2010) {
#     tables <- readHTMLTable(theurl)
#     n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
#     cbDATA <- tables[[which.max(n.rows)]]
#   }
head(cbDATA)
#rename variables
if (i ==2004) {
cbDATA <- rename(cbDATA, c("V1" = "Country.Code", "V2" = "PoliticalParties", "V3" = "Parliament.Legislature",
"V4" = "LegalSystem.Judiciary", "V5" = "Police", "V6" = "Business.PrivateSector",
"v7" = "TaxRevenue", "V8" = "Customs", "V9" = "Media", "V10" = "MedicalServices",
"V11" = "EducationSystem", "V12" = "RegistryAndPermitServices", "V13" = "Utilities",
"V14" = "Military", "V15" = "NGOs", "V16" = "RelibiousBodies"))
}
head(cbDATA)
if (i ==2004) {
cbDATA <- rename(cbDATA, c("V1" = "Country.Code", "V2" = "PoliticalParties", "V3" = "Parliament.Legislature",
"V4" = "LegalSystem.Judiciary", "V5" = "Police", "V6" = "Business.PrivateSector",
"v7" = "TaxRevenue", "V8" = "Customs", "V9" = "Media", "V10" = "MedicalServices",
"V11" = "EducationSystem", "V12" = "RegistryAndPermitServices", "V13" = "Utilities",
"V14" = "Military", "V15" = "NGOs", "V16" = "RelibiousBodies"))
cbDATA <- cbDATA[-1,] #removes top row
}
head(cbDATA)
#Get corruption barometor data
# To what extent do you perceive the following sectors in this country to be affected by corruption?
# (1: not at all corrupt, 5: extremely corrupt)
library(XML)
library(plyr)
library(XLConnect)
library(bitops)
library(RCurl)
i <- 2004
retrive raw data
if(i==2004) {theurl <- "http://archive.transparency.org/policy_research/surveys_indices/gcb/2004/press_release_gcb_2004"}
if (i < 2010) {
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
cbDATA <- tables[[which.max(n.rows)]]
}
head(cbDATA)
#rename variables
if (i ==2004) {
cbDATA <- rename(cbDATA, c("V1" = "Country.Code", "V2" = "PoliticalParties", "V3" = "Parliament.Legislature",
"V4" = "LegalSystem.Judiciary", "V5" = "Police", "V6" = "Business.PrivateSector",
"v7" = "TaxRevenue", "V8" = "Customs", "V9" = "Media", "V10" = "MedicalServices",
"V11" = "EducationSystem", "V12" = "RegistryAndPermitServices", "V13" = "Utilities",
"V14" = "Military", "V15" = "NGOs", "V16" = "ReligiousBodies"))
cbDATA <- cbDATA[-1,] #removes top row
}
#reclass variables
cbDATA$Country.Code <- lapply(cbDATA$Country.Code, as.character)
cbDATA$PoliticalParties <- lapply(cbDATA$PoliticalParties, as.numeric)
cbDATA$PoliticalParties <- lapply(cbDATA$Parliament.Legislature, as.numeric)
cbDATA$LegalSystem.Judiciary <- lapply(cbDATA$LegalSystem.Judiciary, as.numeric)
cbDATA$Police <- lapply(cbDATA$Police, as.numeric)
cbDATA$Business.PrivateSector <- lapply(cbDATA$Business.PrivateSector, as.numeric)
cbDATA$TaxRevenue <- lapply(cbDATA$TaxRevenue, as.numeric)
cbDATA$Customs <- lapply(cbDATA$Customs, as.numeric)
cbDATA$Media <- lapply(cbDATA$Media, as.numeric)
cbDATA$MedicalServices <- lapply(cbDATA$MedicalServices, as.numeric)
cbDATA$EducationSystem <- lapply(cbDATA$EducationSystem, as.numeric)
cbDATA$RegistryAndPermitServices <- lapply(cbDATA$RegistryAndPermitServices, as.numeric)
cbDATA$Utilities <- lapply(cbDATA$Utilities, as.numeric)
cbDATA$Military <- lapply(cbDATA$Military, as.numeric)
cbDATA$NGOs <- lapply(cbDATA$NGOs, as.numeric)
cbDATA$ReligiousBodies <- lapply(cbDATA$ReligiousBodies, as.numeric)
head(cbDATA)
#Get corruption barometor data
# To what extent do you perceive the following sectors in this country to be affected by corruption?
# (1: not at all corrupt, 5: extremely corrupt)
library(XML)
library(plyr)
library(XLConnect)
library(bitops)
library(RCurl)
i <- 2004
#retrive raw data
if(i==2004) {theurl <- "http://archive.transparency.org/policy_research/surveys_indices/gcb/2004/press_release_gcb_2004"}
if (i < 2010) {
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
cbDATA <- tables[[which.max(n.rows)]]
}
head(cbDATA)
#rename variables
if (i ==2004) {
cbDATA <- rename(cbDATA, c("V1" = "Country.Code", "V2" = "PoliticalParties", "V3" = "Parliament.Legislature",
"V4" = "LegalSystem.Judiciary", "V5" = "Police", "V6" = "Business.PrivateSector",
"v7" = "TaxRevenue", "V8" = "Customs", "V9" = "Media", "V10" = "MedicalServices",
"V11" = "EducationSystem", "V12" = "RegistryAndPermitServices", "V13" = "Utilities",
"V14" = "Military", "V15" = "NGOs", "V16" = "ReligiousBodies"))
cbDATA <- cbDATA[-1,] #removes top row
}
#reclass variables
cbDATA$Country.Code <- lapply(cbDATA$Country.Code, as.character)
cbDATA$PoliticalParties <- lapply(cbDATA$PoliticalParties, as.numeric)
cbDATA$PoliticalParties <- lapply(cbDATA$Parliament.Legislature, as.numeric)
cbDATA$LegalSystem.Judiciary <- lapply(cbDATA$LegalSystem.Judiciary, as.numeric)
cbDATA$Police <- lapply(cbDATA$Police, as.numeric)
cbDATA$Business.PrivateSector <- lapply(cbDATA$Business.PrivateSector, as.numeric)
cbDATA$TaxRevenue <- lapply(cbDATA$TaxRevenue, as.numeric)
cbDATA$Customs <- lapply(cbDATA$Customs, as.numeric)
cbDATA$Media <- lapply(cbDATA$Media, as.numeric)
cbDATA$MedicalServices <- lapply(cbDATA$MedicalServices, as.numeric)
cbDATA$EducationSystem <- lapply(cbDATA$EducationSystem, as.numeric)
cbDATA$RegistryAndPermitServices <- lapply(cbDATA$RegistryAndPermitServices, as.numeric)
cbDATA$Utilities <- lapply(cbDATA$Utilities, as.numeric)
cbDATA$Military <- lapply(cbDATA$Military, as.numeric)
cbDATA$NGOs <- lapply(cbDATA$NGOs, as.numeric)
cbDATA$ReligiousBodies <- lapply(cbDATA$ReligiousBodies, as.numeric)
#add year
cbDATA$year <- i
#store
dataname <- paste("cb", i, sep = "")
assign(dataname, cbDATA)
head(cb2004)
i <- 2005
if (i == 2005) theurl <- "http://archive.transparency.org/content/download/5084/29852/file/gcb2005_tables_results_05_11_29.zip"}
if (i == 2005) theurl <- "http://archive.transparency.org/content/download/5084/29852/file/gcb2005_tables_results_05_11_29.zip"
temp <- tempfile()
download.file(theurl,temp)
unzip(temp, list = TRUE)
library(foreign)
test <- read.spss("C:\Users\Jason\Desktop\VOP TI3.SAV", to.data.frame = TRUE)
test <- read.spss("C:/Users/Jason/Desktop/VOP TI3.SAV", to.data.frame = TRUE)
head(temp)
test <- read.spss("C:\\Users\\Jason\\Desktop\\VOP TI3.SAV", to.data.frame = TRUE)
test <- read.spss("C:\\Users\\Jason\\Desktop\\VOP TI3.SAV", to.data.frame = TRUE, use.value.labels = FALSE)
head(test)
?read.spss
install.packages("foreign")
library(foreign)
temp <- read.spss("C:\Users\Jason\Desktop\VOP TI3.SAV")
temp <- read.spss("C:\\Users\\Jason\\Desktop\\VOP TI3.SAV")
head(test)
head(temp)
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save('fig/n1.html', cdn = TRUE)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
n1
cars <- mtcars
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
head(cars)
cars <- NULL
data <- mtcart
data <- mtcars
data <- mtcars
View(data)
sum(data$am)
summary(data$am)
tapply(data$mpg, data$am, summay)
tapply(data$mpg, data$am, summary)
lm(mpg ~ am)
lm(mpg ~ am, data=data)
tapply(data$mpg, data$am, summary)
data$am <- factor(data$am, labels=c("Automatic","Manual"))
boxplot(mpg~am, data=data)
par(mfrow = c(1,2))
boxplot(mpg~am, data=data)
plot(mpg,am, data = "data")
plot(mpg~am, data = "data")
par(mfrow = c(1,2))
boxplot(mpg~am, data=data)
plot(mpg, am, data=data)
boxplot(mpg~am, data=data)
plot(mpg, am, data=data)
plot(mpg~ am, data=data)
plot(mpg~ am, data=data)
fit <- lm(mpg ~ am, data=data)
summary(fit)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
boxplot(fit)
residuals(fit)
data$residuals <- residuals(fit)
data$residuals <- residuals(fit)
boxplot(residuals~am, data=data)
library(shiny)
data <- mtcars
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('myHist')
)
))
runApp()
setwd("C:\\Users\\Jason\\Box Sync\\Current Projects\\Playground")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(googleVis)
googleVis(demo)
googleVis(Demo)
demo(googleVis)
data(AirPassengers)
data <- AirPassengers
data <- fdeaths
data <- ability.cov
data <- airquality
runApp()
runApp()
runApp()
runApp()
runApp()
lm(Ozone ~ Month)
lm(data$Ozone ~ Month)
lm(data$Ozone ~ data$Month)
runApp()
runApp()
runApp()
runApp()
install.packages("shinyapps")
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
library(shinyapps)
shinyapps::setAccountInfo(
name="jasonjensen",
token="0DDAD65639584CCD455A2C5B2758BA8F",
secret="<SECRET>")
shinyapps::setAccountInfo(
name="jasonjensen",
token="0DDAD65639584CCD455A2C5B2758BA8F",
secret="uU3rZK5vDlBFElZNzfrFyqglfKH8/OhoA3umWhEK")
deployApp()
deployApp()
setwd("C:\\Users\\Jason\\Box Sync\\Current Projects\\Playground\\data products project 1")
deployApp()
runApp()
deployApp()
setwd("C:\\Users\\Jason\\Box Sync\\Current Projects\\Playground")
setwd("C:\\Users\\Jason\\Box Sync\\Current Projects\\Playground\\data products projects\Visual_Regression_of_Air_Quality_Dataset")
setwd("C:\\Users\\Jason\\Box Sync\\Current Projects\\Playground\\data products projects\\Visual_Regression_of_Air_Quality_Dataset")
deployApp()
deployApp()
